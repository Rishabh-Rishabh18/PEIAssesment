<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FakeXrmEasy.Plugins</name>
    </assembly>
    <members>
        <member name="T:FakeXrmEasy.Plugins.Audit.IXrmFakedContextPluginStepAuditExtensions">
            <summary>
            IXrmFakedContext plugin step audit extensions
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Audit.IXrmFakedContextPluginStepAuditExtensions.GetPluginStepAudit(FakeXrmEasy.Abstractions.IXrmFakedContext)">
            <summary>
            Returns an audit of all the plugin steps that were executed as part of pipeline simulation
            </summary>
            <param name="context">The context to where retrieve a plugin step audit from</param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Audit.IPluginStepAudit">
            <summary>
            Interface to interact with auditing of plugin steps when using pipeline simulation
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Audit.IPluginStepAudit.CreateQuery">
            <summary>
            Creates a query against all the plugin steps that were executed by the pipeline simulation
            </summary>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Audit.PluginStepAudit">
            <summary>
            Stores and interacts an audit of all the plugin steps executed when pipeline simulation is enabled
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Audit.PluginStepAudit.#ctor">
            <summary>
            Default constructor. Creates an empty audit of plugin steps.
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Audit.PluginStepAudit.CreateQuery">
            <summary>
            Creates a query against all the plugin steps that were executed by the pipeline simulation
            </summary>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Audit.PluginStepAudit.Add(FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails)">
            <summary>
            Internal. Adds a new plugin step audit details to the current PluginStepAudit
            </summary>
            <param name="details"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails">
            <summary>
            Stores information about a given plugin step execution
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.ExecutedOn">
            <summary>
            Timestamp of when this plugin step was executed, in UTC
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.PluginStepId">
            <summary>
            Id of the plugin step that was executed
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.Stage">
            <summary>
            Stage that triggered this plugin execution
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.Mode">
            <summary>
            The mode the in which the plugin step was executed
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.MessageName">
            <summary>
            Message that triggered this execution (i.e. Create, Update, and so on...)
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.TargetEntity">
            <summary>
            Target entity that triggered this plugin execution or null
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.TargetEntityReference">
            <summary>
            Target EntityReference that triggered this plugin execution or null
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.PluginAssemblyType">
            <summary>
            Type of the plugin assembly that was triggered in this execution
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.InputParameters">
            <summary>
            InputParameters that were part of the plugin execution
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.OutputParameters">
            <summary>
            OutputParameters that were part of the plugin execution
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.PluginStepDefinition">
            <summary>
            The plugin step definition that triggered the plugin execution
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Audit.PluginStepAuditDetails.PluginContext">
            <summary>
            The plugin execution context that was passed into the plugin when it was executed to check any other necessary properties
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Audit.PluginStepAuditNotEnabledException">
            <summary>
            Exception thrown when querying plugin step audit without enabling them in the pipeline first
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Audit.PluginStepAuditNotEnabledException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Definitions.IPluginImageDefinition">
            <summary>
             Contains necessary registration info of a plugin image used in Pipeline Simulation
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginImageDefinition.Name">
            <summary>
            Name of the plugin image definition
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginImageDefinition.ImageType">
            <summary>
            Type of Image: PreImage, PostImage, or Both
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginImageDefinition.Attributes">
            <summary>
            Attributes that this plugin image contains
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Definitions.IPluginStepConfigurations">
            <summary>
            Allows setting secure and unsecure configurations as part of a plugin registration
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepConfigurations.SecureConfig">
            <summary>
            The secure configuration string
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepConfigurations.UnsecureConfig">
            <summary>
            The unsecure configuration string
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepConfigurations.SecureConfigId">
            <summary>
            Optional. The identifier of the secure configuration
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition">
            <summary>
            Interface that contains all the necessary information to register a plugin step
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.Id">
            <summary>
            Primary key of the stored sdkmessageprocessingstep
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.Stage">
            <summary>
            Stage where this plugins runs.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.MessageName">
            <summary>
            Name of the OrganizationRequest that triggers this plugin step
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.Mode">
            <summary>
            Mode of this plugin step
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.EntityLogicalName">
            <summary>
            Entity Logical Name or null, the plugin will only execute for these entities if specified. 
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.EntityTypeCode">
            <summary>
            If present, the plugin will only execute for entities whose EntityTypeCode matches this value, or any entity otherwise
            EntityTypeCode will throw an exception if also EntityLogicalName was set
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.Rank">
            <summary>
            The order in which this plugin will run relative to other plugin steps of the same stage and mode
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.FilteringAttributes">
            <summary>
            The attributes used to filter the execution of this plugin. The plugin will only execute if any of the attributes are present in the request,
            or will run regardless of any attributes if empty
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.AssemblyName">
            <summary>
            The name of the assembly where the plugin type will be searched and executed
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.PluginType">
            <summary>
            Type of the plugin to be executed (the plugin class name)
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.ImagesDefinitions">
            <summary>
            Any plugin images to be registered for this plugin step, or null or empty
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.Configurations">
            <summary>
            Stores information about the secure and unsecure configurations of this plugin step
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition.PluginInstance">
            <summary>
            Optional. Specific plugin instance that will be executed instead of the plugin parameterless constructor or configurations constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Extensions.EntityExtensions">
            <summary>
            Entity extensions
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Extensions.EntityExtensions.ReplaceAttributesWith(Microsoft.Xrm.Sdk.Entity,Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Replaces existing attributes in entity1, with the values from entity2
            </summary>
            <param name="entity1"></param>
            <param name="entity2"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Extensions.GetAssociatedNonBulkRequestNameException">
            <summary>
            Exception thrown when a method was invoked on an organization request that is not a bulk operation
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Extensions.GetAssociatedNonBulkRequestNameException.#ctor(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Default constructor
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Extensions.InvalidBulkOperationExtensionException">
            <summary>
            Exception raised when a bulk request is converted to a non bulk request but the original request wasn't a valid bulk request
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Extensions.OrganizationRequestExtensions.GetAssociatedNonBulkRequestName(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Returns a request name for a non-bulk request from the current bulk request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Extensions.OrganizationRequestExtensions.ToNonBulkOrganizationRequests(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Converts the current bulk operation organisation request into an array of multiple non-bulk organization requests
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Extensions.OrganizationRequestExtensions.ToBulkOrganizationRequest(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Converts a single non-bulk operation request into an equivalent bulk operation with a single record
            </summary>
            <param name="request"></param>
            <returns></returns>
            <exception cref="T:FakeXrmEasy.Plugins.Extensions.InvalidBulkOperationExtensionException"></exception>
        </member>
        <member name="M:FakeXrmEasy.Plugins.FakePluginExecutor.ExecutePluginWith``1(FakeXrmEasy.Abstractions.Plugins.IXrmFakedPluginContextProperties,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext)">
            <summary>
            Executes a plugin with the specified properties and plugin context. It will use the parameterless constructor.
            </summary>
            <param name="pluginContextProperties"></param>
            <param name="plugCtx"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.FakePluginExecutor.ExecutePluginWith(FakeXrmEasy.Abstractions.Plugins.IXrmFakedPluginContextProperties,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext,Microsoft.Xrm.Sdk.IPlugin)">
            <summary>
            Executes a plugin with the specified properties and plugin context. It will use the instance provided as opposed to the parameterless constructor.
            </summary>
            <param name="pluginContextProperties"></param>
            <param name="plugCtx"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.FakePluginExecutor.ExecutePluginWithConfigurations``1(FakeXrmEasy.Abstractions.Plugins.IXrmFakedPluginContextProperties,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext,System.String,System.String)">
            <summary>
            Executes a plugin with the specified properties and plugin context and unsecure and secure configurations
            </summary>
            <param name="pluginContextProperties"></param>
            <param name="plugCtx"></param>
            <param name="unsecureConfiguration"></param>
            <param name="secureConfiguration"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:FakeXrmEasy.Plugins.FakePluginFactory.New(System.IServiceProvider,Microsoft.Xrm.Sdk.IPlugin)">
            <summary>
            Returns a fake plugin that will be executed using the provided fakeServiceProvider using a specific instance
            </summary>
            <param name="fakeServiceProvider"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.FakePluginFactory.New``1(System.IServiceProvider)">
            <summary>
            Returns a fake plugin that will be executed using the provided fakeServiceProvider using the plugin parameterless constructor
            </summary>
            <param name="fakeServiceProvider"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions">
            <summary>
            Adds extension methods to an IXrmBaseContext useful for developing and testing plugins
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.GetDefaultPluginContext(FakeXrmEasy.Abstractions.IXrmBaseContext)">
            <summary>
            Returns a plugin context with default properties one can override
            </summary>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.GetPluginContextProperties(FakeXrmEasy.Abstractions.IXrmBaseContext)">
            <summary>
            Returns the default plugin context properties of this IXrmBaseContext
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWith(FakeXrmEasy.Abstractions.IXrmBaseContext,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext,Microsoft.Xrm.Sdk.IPlugin)">
            <summary>
            Executes a plugin passing a custom context. This is useful whenever we need to mock more complex plugin contexts (ex: passing MessageName, plugin Depth, InitiatingUserId etc...)
            </summary>
            <param name="context">The IXrmBaseContext instance where this plugin will be executed</param>
            <param name="plugCtx">A plugin context with the minimum set of properties needed for the plugin execution</param>
            <param name="instance">A specific plugin instance, where you might have already setup / injected other dependencies</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWith``1(FakeXrmEasy.Abstractions.IXrmBaseContext,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext)">
            <summary>
            Executes a plugin passing a custom context. This is useful whenever we need to mock more complex plugin contexts (ex: passing MessageName, plugin Depth, InitiatingUserId etc...)
            </summary>
            <typeparam name="T">Must be a plugin</typeparam>
            <param name="context">The IXrmBaseContext instance where this plugin will be executed</param>
            <param name="ctx">A plugin context with the minimum set of properties needed for the plugin execution</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWith``1(FakeXrmEasy.Abstractions.IXrmBaseContext,Microsoft.Xrm.Sdk.ParameterCollection,Microsoft.Xrm.Sdk.ParameterCollection,Microsoft.Xrm.Sdk.EntityImageCollection,Microsoft.Xrm.Sdk.EntityImageCollection)">
            <summary>
            Method to execute a plugin that takes several plugin execution properties as parameters. Soon to be deprecated, use the ExecutePluginWith&lt;T&gt; that takes a plugin context instance instead
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="inputParameters"></param>
            <param name="outputParameters"></param>
            <param name="preEntityImages"></param>
            <param name="postEntityImages"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithConfigurations``1(FakeXrmEasy.Abstractions.IXrmBaseContext,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext,System.String,System.String)">
            <summary>
            Executes a plugin with the unsecure and secure configurations specified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="plugCtx"></param>
            <param name="unsecureConfiguration"></param>
            <param name="secureConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithConfigurations``1(FakeXrmEasy.Abstractions.IXrmBaseContext,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext,``0,System.String,System.String)">
            <summary>
            Method to execute a plugin with configurations that also takes a specific plugin instance where you might already injected other external dependencies
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="plugCtx"></param>
            <param name="instance"></param>
            <param name="unsecureConfiguration"></param>
            <param name="secureConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithTarget``1(FakeXrmEasy.Abstractions.IXrmBaseContext,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext,Microsoft.Xrm.Sdk.Entity,System.String,System.Int32)">
            <summary>
            Executes a plugin with a given target
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="ctx"></param>
            <param name="target"></param>
            <param name="messageName"></param>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithTarget``1(FakeXrmEasy.Abstractions.IXrmBaseContext,Microsoft.Xrm.Sdk.Entity,System.String,System.Int32)">
            <summary>
            Executes the plugin of type T against the faked context for an entity target
            and returns the faked plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="target">The entity to execute the plug-in for.</param>
            <param name="messageName">Sets the message name.</param>
            <param name="stage">Sets the stage.</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithTarget(FakeXrmEasy.Abstractions.IXrmBaseContext,Microsoft.Xrm.Sdk.IPlugin,Microsoft.Xrm.Sdk.Entity,System.String,System.Int32)">
            <summary>
            Executes the plugin of type T against the faked context for an entity target
            and returns the faked plugin
            </summary>
            <param name="context"></param>
            <param name="instance"></param>
            <param name="target">The entity to execute the plug-in for.</param>
            <param name="messageName">Sets the message name.</param>
            <param name="stage">Sets the stage.</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithTargetReference``1(FakeXrmEasy.Abstractions.IXrmBaseContext,Microsoft.Xrm.Sdk.EntityReference,System.String,System.Int32)">
            <summary>
            Executes the plugin of type T against the faked context for an entity reference target
            and returns the faked plugin
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="target">The entity reference to execute the plug-in for.</param>
            <param name="messageName">Sets the message name.</param>
            <param name="stage">Sets the stage.</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithTargetReference(FakeXrmEasy.Abstractions.IXrmBaseContext,Microsoft.Xrm.Sdk.IPlugin,Microsoft.Xrm.Sdk.EntityReference,System.String,System.Int32)">
            <summary>
            Executes the plugin of type T against the faked context for an entity reference target
            and returns the faked plugin
            </summary>
            <param name="context">The IXrmBaseContext used to execute the plugin</param>
            <param name="instance">A specific plugin instance</param>
            <param name="target">The entity reference to execute the plug-in for.</param>
            <param name="messageName">Sets the message name.</param>
            <param name="stage">Sets the stage.</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithTargetAndPreEntityImages``1(FakeXrmEasy.Abstractions.IXrmBaseContext,System.Object,Microsoft.Xrm.Sdk.EntityImageCollection,System.String,System.Int32)">
            <summary>
            Returns a faked plugin with a target and the specified pre entity images
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithTargetAndPostEntityImages``1(FakeXrmEasy.Abstractions.IXrmBaseContext,System.Object,Microsoft.Xrm.Sdk.EntityImageCollection,System.String,System.Int32)">
            <summary>
            Returns a faked plugin with a target and the specified post entity images
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="target"></param>
            <param name="postEntityImages"></param>
            <param name="messageName"></param>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.IXrmBaseContextPluginExtensions.ExecutePluginWithTargetAndInputParameters``1(FakeXrmEasy.Abstractions.IXrmBaseContext,Microsoft.Xrm.Sdk.Entity,Microsoft.Xrm.Sdk.ParameterCollection,System.String,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="target"></param>
            <param name="inputParameters"></param>
            <param name="messageName"></param>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3">
            <summary>
            Default custom api executor that associates an early bound custom api request and response with a plugin type that will implement it
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Q"></typeparam>
            <typeparam name="R"></typeparam>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3.PluginType">
            <summary>
            Returns the plugin instance that will execute this custom api
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3.MessageName">
            <summary>
            The name of the request that will trigger this custom api
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3.CustomProcessingType">
            <summary>
            Custom Processing Type of this CustomApiFakeMessageExecutor
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3.BindingType">
            <summary>
            Binding type for this CustomApiFakeMessageExecutor
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3.EntityLogicalName">
            <summary>
            If BindingType is Entity, this is the name of the Entity to bind this custom api to 
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3.GetResponsibleRequestType">
            <summary>
            Returns the organization request type associated with this custom api
            </summary>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3.CanExecute(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Returns true if the custom api executor can execute the specified request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`3.Execute(Microsoft.Xrm.Sdk.OrganizationRequest,FakeXrmEasy.Abstractions.IXrmFakedContext)">
            <summary>
            Executes the custom api
            </summary>
            <param name="request"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1">
            <summary>
            Default custom api executor that associates a late bound organization request with a plugin type that will implement it
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1._pluginType">
            <summary>
            The plugin assembly to execute by this message
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1.PluginType">
            <summary>
            Returns the plugin instance that will execute this custom api
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1.MessageName">
            <summary>
            The name of the request that will trigger this custom api
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1.CustomProcessingType">
            <summary>
            Custom Processing Type of this CustomApiFakeMessageExecutor
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1.BindingType">
            <summary>
            Binding type for this CustomApiFakeMessageExecutor
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1.EntityLogicalName">
            <summary>
            If BindingType is Entity, this is the name of the Entity to bind this custom api to 
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1.GetResponsibleRequestType">
            <summary>
            Returns the organization request type associated with this custom api
            </summary>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1.CanExecute(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Returns true if the custom api executor can execute the specified request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.CustomApis.CustomApiFakeMessageExecutor`1.Execute(Microsoft.Xrm.Sdk.OrganizationRequest,FakeXrmEasy.Abstractions.IXrmFakedContext)">
            <summary>
            Executes the custom api
            </summary>
            <param name="request"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Middleware.CustomApis.MiddlewareBuilderCustomApisExtensions">
            <summary>
            Extension methods to configure custom api executions in middleware
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.CustomApis.MiddlewareBuilderCustomApisExtensions.AddCustomApiFakeMessageExecutors(FakeXrmEasy.Abstractions.Middleware.IMiddlewareBuilder,System.Reflection.Assembly)">
            <summary>
            Adds all custom api fake message executors that exist in the selected assembly
            </summary>
            <param name="builder"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Middleware.Pipeline.Exceptions.CustomDiscoveryFunctionMissingException">
            <summary>
            Exception raised when automatic registration of plugin steps is enabled but the discovery function is not defined
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.Pipeline.Exceptions.CustomDiscoveryFunctionMissingException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Middleware.Pipeline.Exceptions.MissingPluginTypeInPluginStepDefinitionException">
            <summary>
            Exception thrown when a plugin step definition used in a CustomRegistrationFunc is null
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Middleware.Pipeline.Exceptions.MissingPluginTypeInPluginStepDefinitionException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.MissingPipelineTypesException">
            <summary>
            Exception thrown when using early bound types and not all the necessary pipeline types have been generated
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.MissingPipelineTypesException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType">
            <summary>
            Type that inherits from the IPlugin interface and is contained within a plug-in assembly.
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.AssemblyName">
            <summary>
            Full path name of the plug-in assembly.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.CreatedBy">
            <summary>
            Unique identifier of the user who created the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.CreatedOn">
            <summary>
            Date and time when the plug-in type was created.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.CreatedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who created the plugintype.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.Culture">
            <summary>
            Culture code for the plug-in assembly.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.CustomizationLevel">
            <summary>
            Customization level of the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.CustomWorkflowActivityInfo">
            <summary>
            Serialized Custom Activity Type information, including required arguments. For more information, see SandboxCustomActivityInfo.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.Description">
            <summary>
            Description of the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.FriendlyName">
            <summary>
            User friendly name for the plug-in.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.IsWorkflowActivity">
            <summary>
            Indicates if the plug-in is a custom activity for workflows.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.Major">
            <summary>
            Major of the version number of the assembly for the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.Minor">
            <summary>
            Minor of the version number of the assembly for the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.ModifiedBy">
            <summary>
            Unique identifier of the user who last modified the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.ModifiedOn">
            <summary>
            Date and time when the plug-in type was last modified.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.ModifiedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who last modified the plugintype.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.Name">
            <summary>
            Name of the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.OrganizationId">
            <summary>
            Unique identifier of the organization with which the plug-in type is associated.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.OverwriteTime">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.PluginAssemblyId">
            <summary>
            Unique identifier of the plug-in assembly that contains this plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.PluginTypeId">
            <summary>
            Unique identifier of the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.PluginTypeIdUnique">
            <summary>
            Unique identifier of the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.PublicKeyToken">
            <summary>
            Public key token of the assembly for the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.SolutionId">
            <summary>
            Unique identifier of the associated solution.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.TypeName">
            <summary>
            Fully qualified type name of the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.Version">
            <summary>
            Version number of the assembly for the plug-in type.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.WorkflowActivityGroupName">
            <summary>
            Group name of workflow custom activity.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.plugintype_sdkmessageprocessingstep">
            <summary>
            1:N plugintype_sdkmessageprocessingstep
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.PluginType.plugintypeid_sdkmessageprocessingstep">
            <summary>
            1:N plugintypeid_sdkmessageprocessingstep
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage">
            <summary>
            Message that is supported by the SDK.
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.AutoTransact">
            <summary>
            Information about whether the SDK message is automatically transacted.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.Availability">
            <summary>
            Identifies where a method will be exposed. 0 - Server, 1 - Client, 2 - both.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.CategoryName">
            <summary>
            If this is a categorized method, this is the name, otherwise None.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.CreatedBy">
            <summary>
            Unique identifier of the user who created the SDK message.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.CreatedOn">
            <summary>
            Date and time when the SDK message was created.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.CreatedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who created the sdkmessage.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.CustomizationLevel">
            <summary>
            Customization level of the SDK message.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.ExecutePrivilegeName">
            <summary>
            Name of the privilege that allows execution of the SDK message
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.Expand">
            <summary>
            Indicates whether the SDK message should have its requests expanded per primary entity defined in its filters.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.IntroducedVersion">
            <summary>
            Version in which the component is introduced.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.IsActive">
            <summary>
            Information about whether the SDK message is active.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.IsManaged">
            <summary>
            Information that specifies whether this component is managed.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.IsPrivate">
            <summary>
            Indicates whether the SDK message is private.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.IsReadOnly">
            <summary>
            Identifies whether an SDK message will be ReadOnly or Read Write. false - ReadWrite, true - ReadOnly .
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.IsValidForExecuteAsync">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.ModifiedBy">
            <summary>
            Unique identifier of the user who last modified the SDK message.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.ModifiedOn">
            <summary>
            Date and time when the SDK message was last modified.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.ModifiedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who last modified the sdkmessage.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.Name">
            <summary>
            Name of the SDK message.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.OrganizationId">
            <summary>
            Unique identifier of the organization with which the SDK message is associated.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.OverwriteTime">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.SdkMessageId">
            <summary>
            Unique identifier of the SDK message entity.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.SdkMessageIdUnique">
            <summary>
            Unique identifier of the SDK message.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.SolutionId">
            <summary>
            Unique identifier of the associated solution.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.Template">
            <summary>
            Indicates whether the SDK message is a template.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.ThrottleSettings">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.VersionNumber">
            <summary>
            Number that identifies a specific revision of the SDK message. 
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.WorkflowSdkStepEnabled">
            <summary>
            Whether or not the SDK message can be called from a workflow.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.sdkmessageid_sdkmessagefilter">
            <summary>
            1:N sdkmessageid_sdkmessagefilter
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessage.sdkmessageid_sdkmessageprocessingstep">
            <summary>
            1:N sdkmessageid_sdkmessageprocessingstep
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter">
            <summary>
            Filter that defines which SDK messages are valid for each type of entity.
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.Availability">
            <summary>
            Identifies where a method will be exposed. 0 - Server, 1 - Client, 2 - both.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.CreatedBy">
            <summary>
            Unique identifier of the user who created the SDK message filter.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.CreatedOn">
            <summary>
            Date and time when the SDK message filter was created.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.CreatedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who created the sdkmessagefilter.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.CustomizationLevel">
            <summary>
            Customization level of the SDK message filter.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.IntroducedVersion">
            <summary>
            Version in which the component is introduced.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.IsCustomProcessingStepAllowed">
            <summary>
            Indicates whether a custom SDK message processing step is allowed.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.IsManaged">
            <summary>
            Information that specifies whether this component is managed.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.IsVisible">
            <summary>
            Indicates whether the filter should be visible.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.ModifiedBy">
            <summary>
            Unique identifier of the user who last modified the SDK message filter.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.ModifiedOn">
            <summary>
            Date and time when the SDK message filter was last modified.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.ModifiedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who last modified the sdkmessagefilter.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.Name">
            <summary>
            Name of the SDK message filter.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.OrganizationId">
            <summary>
            Unique identifier of the organization with which the SDK message filter is associated.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.OverwriteTime">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.PrimaryObjectTypeCode">
            <summary>
            Type of entity with which the SDK message filter is primarily associated.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.RestrictionLevel">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.SdkMessageFilterId">
            <summary>
            Unique identifier of the SDK message filter entity.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.SdkMessageFilterIdUnique">
            <summary>
            Unique identifier of the SDK message filter.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.SdkMessageId">
            <summary>
            Unique identifier of the related SDK message.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.SecondaryObjectTypeCode">
            <summary>
            Type of entity with which the SDK message filter is secondarily associated.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.SolutionId">
            <summary>
            Unique identifier of the associated solution.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.WorkflowSdkStepEnabled">
            <summary>
            Whether or not the SDK message can be called from a workflow.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.sdkmessagefilterid_sdkmessageprocessingstep">
            <summary>
            1:N sdkmessagefilterid_sdkmessageprocessingstep
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageFilter.sdkmessageid_sdkmessagefilter">
            <summary>
            N:1 sdkmessageid_sdkmessagefilter
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.sdkmessageprocessingstep_invocationsource">
            <summary>
            Identifies if a plug-in should be executed from a parent pipeline, a child pipeline, or both.
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.sdkmessageprocessingstep_mode">
            <summary>
            Run-time mode of execution, for example, synchronous or asynchronous.
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.sdkmessageprocessingstep_stage">
            <summary>
            Stage in the execution pipeline that the SDK message processing step is in.
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.sdkmessageprocessingstep_statecode">
            <summary>
            Status of the SDK message processing step.
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.sdkmessageprocessingstep_statuscode">
            <summary>
            Reason for the status of the SDK message processing step.
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.sdkmessageprocessingstep_supporteddeployment">
            <summary>
            Deployment that the SDK message processing step should be executed on; server, client, or both.
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep">
            <summary>
            Stage in the execution pipeline that a plug-in is to execute.
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.AsyncAutoDelete">
            <summary>
            Indicates whether the asynchronous system job is automatically deleted on completion.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.CanUseReadOnlyConnection">
            <summary>
            Identifies whether a SDK Message Processing Step type will be ReadOnly or Read Write. false - ReadWrite, true - ReadOnly 
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.Category">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.Configuration">
            <summary>
            Step-specific configuration for the plug-in type. Passed to the plug-in constructor at run time.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.CreatedBy">
            <summary>
            Unique identifier of the user who created the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.CreatedOn">
            <summary>
            Date and time when the SDK message processing step was created.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.CreatedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who created the sdkmessageprocessingstep.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.CustomizationLevel">
            <summary>
            Customization level of the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.Description">
            <summary>
            Description of the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.EnablePluginProfiler">
            <summary>
            EnablePluginProfiler
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.EventExpander">
            <summary>
            Configuration for sending pipeline events to the Event Expander service.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.EventHandler">
            <summary>
            Unique identifier of the associated event handler.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.FilteringAttributes">
            <summary>
            Comma-separated list of attributes. If at least one of these attributes is modified, the plug-in should execute.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.ImpersonatingUserId">
            <summary>
            Unique identifier of the user to impersonate context when step is executed.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.IntroducedVersion">
            <summary>
            Version in which the form is introduced.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.InvocationSource">
            <summary>
            Identifies if a plug-in should be executed from a parent pipeline, a child pipeline, or both.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.IsCustomizable">
            <summary>
            Information that specifies whether this component can be customized.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.IsHidden">
            <summary>
            Information that specifies whether this component should be hidden.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.IsManaged">
            <summary>
            Information that specifies whether this component is managed.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.Mode">
            <summary>
            Run-time mode of execution, for example, synchronous or asynchronous.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.ModifiedBy">
            <summary>
            Unique identifier of the user who last modified the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.ModifiedOn">
            <summary>
            Date and time when the SDK message processing step was last modified.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.ModifiedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who last modified the sdkmessageprocessingstep.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.Name">
            <summary>
            Name of SdkMessage processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.OrganizationId">
            <summary>
            Unique identifier of the organization with which the SDK message processing step is associated.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.OverwriteTime">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.PluginTypeId">
            <summary>
            Unique identifier of the plug-in type associated with the step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.PowerfxRuleId">
            <summary>
            Unique identifier for powerfxrule associated with SdkMessageProcessingStep.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.Rank">
            <summary>
            Processing order within the stage.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.RuntimeIntegrationProperties">
            <summary>
            For internal use only. Holds miscellaneous properties related to runtime integration.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.SdkMessageFilterId">
            <summary>
            Unique identifier of the SDK message filter.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.SdkMessageId">
            <summary>
            Unique identifier of the SDK message.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.SdkMessageProcessingStepId">
            <summary>
            Unique identifier of the SDK message processing step entity.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.SdkMessageProcessingStepIdUnique">
            <summary>
            Unique identifier of the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.SdkMessageProcessingStepSecureConfigId">
            <summary>
            Unique identifier of the Sdk message processing step secure configuration.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.SolutionId">
            <summary>
            Unique identifier of the associated solution.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.Stage">
            <summary>
            Stage in the execution pipeline that the SDK message processing step is in.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.StateCode">
            <summary>
            Status of the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.StatusCode">
            <summary>
            Reason for the status of the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.SupportedDeployment">
            <summary>
            Deployment that the SDK message processing step should be executed on; server, client, or both.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.VersionNumber">
            <summary>
            Number that identifies a specific revision of the SDK message processing step. 
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.plugintype_sdkmessageprocessingstep">
            <summary>
            N:1 plugintype_sdkmessageprocessingstep
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.plugintypeid_sdkmessageprocessingstep">
            <summary>
            N:1 plugintypeid_sdkmessageprocessingstep
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.sdkmessagefilterid_sdkmessageprocessingstep">
            <summary>
            N:1 sdkmessagefilterid_sdkmessageprocessingstep
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStep.sdkmessageid_sdkmessageprocessingstep">
            <summary>
            N:1 sdkmessageid_sdkmessageprocessingstep
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig">
            <summary>
            Non-public custom configuration that is passed to a plug-in's constructor.
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.CreatedBy">
            <summary>
            Unique identifier of the user who created the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.CreatedOn">
            <summary>
            Date and time when the SDK message processing step was created.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.CreatedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who created the sdkmessageprocessingstepsecureconfig.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.CustomizationLevel">
            <summary>
            Customization level of the SDK message processing step secure configuration.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.ModifiedBy">
            <summary>
            Unique identifier of the user who last modified the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.ModifiedOn">
            <summary>
            Date and time when the SDK message processing step was last modified.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.ModifiedOnBehalfBy">
            <summary>
            Unique identifier of the delegate user who last modified the sdkmessageprocessingstepsecureconfig.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.OrganizationId">
            <summary>
            Unique identifier of the organization with which the SDK message processing step is associated.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.SdkMessageProcessingStepSecureConfigId">
            <summary>
            Unique identifier of the SDK message processing step secure configuration.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.SdkMessageProcessingStepSecureConfigIdUnique">
            <summary>
            Unique identifier of the SDK message processing step.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.SecureConfig">
            <summary>
            Secure step-specific configuration for the plug-in type that is passed to the plug-in's constructor at run time.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.Pipeline.PipelineTypes.SdkMessageProcessingStepSecureConfig.sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep">
            <summary>
            1:N sdkmessageprocessingstepsecureconfigid_sdkmessageprocessingstep
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext2">
            <summary>
            Implements IPluginExecutionContext2 interface, an extension of IPluginExecutionContext adding support for azure AAD properties
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext2.UserAzureActiveDirectoryObjectId">
            <summary>
            Gets azure active directory object Id of user.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext2.InitiatingUserAzureActiveDirectoryObjectId">
            <summary>
            Gets azure active directory object Id of user that initiates web service.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext2.InitiatingUserApplicationId">
            <summary>
            Gets application Id of user that initiates the plugin (for NON-app user .. it is Guid.Empty)
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext2.PortalsContactId">
            <summary>
            Gets contactId that got passed for the calls that come from portals client to web service (for NON-portal/Anonymous call, it is guid.Empty)
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext2.IsPortalsClientCall">
            <summary>
            Gets a value indicating whether 'True' if the call is originated from Portals client
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext3">
            <summary>
            Implements IPluginExecutionContext2 interface, an extension of IPluginExecutionContext adding support for azure AAD properties
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext3.AuthenticatedUserId">
            <summary>
            Gets id of the authenticated user
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext3.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext4">
            <summary>
            XrmFakedPluginExecutionContext4 adds the necessary plugin context properties for bulk operations (xMultiple messages)
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext4.PreEntityImagesCollection">
            <summary>
            Contains a collection of PreEntityImages
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext4.PostEntityImagesCollection">
            <summary>
            Contains a collection of PostEntityImages
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext4.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginImages.PluginImageDefinition">
            <summary>
            Contains necessary info about a plugin image used in Pipeline Simulation
            
            
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginImages.PluginImageDefinition.Name">
            <summary>
            Name of the plugin image definition
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginImages.PluginImageDefinition.ImageType">
            <summary>
            Type of Image: PreImage, PostImage, or Both
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginImages.PluginImageDefinition.Attributes">
            <summary>
            Attributes that this plugin image contains
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginImages.PluginImageDefinition.#ctor(System.String,FakeXrmEasy.Abstractions.Plugins.Enums.ProcessingStepImageType,System.String[])">
            <summary>
            Default constructor
            </summary>
            <param name="name"></param>
            <param name="imageType"></param>
            <param name="attributes"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginImages.PostImage">
            <summary>
            Defines a PostImage is available for specific requests and stages
            
            ---- Message------Stage--------Pre-Image-----Post-Image------
                 Create       PRE             No             No
                 Update       PRE             Yes            No
                 Delete       PRE             Yes            No
                 Upsert       PRE             ??             ??
                 Create       POST            No             Yes
                 Update       POST            Yes            Yes
                 Delete       POST            Yes            No
                 Upsert       POST            ??             ??
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginImages.PostImage.IsAvailableFor(System.String,FakeXrmEasy.Abstractions.Plugins.Enums.ProcessingStepStage)">
            <summary>
            Determines if a PostImage is available for the given request and plugin stage
            </summary>
            <param name="messageName">The message name to check the availability for</param>
            <param name="stage">The plugin stage to check such availability</param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginImages.PreImage">
            <summary>
            Defines if PreImage is available for specific requests and stages
            
            ---- Message------Stage--------Pre-Image-----Post-Image------
                 Create       PRE             No             No
                 Update       PRE             Yes            No
                 Delete       PRE             Yes            No
                 Upsert       PRE             ??             ??
                 Create       POST            No             Yes
                 Update       POST            Yes            Yes
                 Delete       POST            Yes            No
                 Upsert       POST            ??             ??
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginImages.PreImage.IsAvailableFor(System.String)">
            <summary>
            Determines if a PreImage is available for the given request and plugin stage
            </summary>
            <param name="messageName">The message name to check the availability for</param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginInstances.IPluginInstancesRepository">
            <summary>
            Contains a repository of plugin instances to execute per sdkmessageprocessingstep.
            Pipeline simulation will use any of these instances over any other default parameterless constructor or constructor with configurations
            This repository allows advanced scenarios of using user-defined plugin instances with custom constructors (for DI purposes)
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginInstances.IPluginInstancesRepository.GetPluginInstance(System.Guid)">
            <summary>
            Returns a plugin instance for the associated SdkMessageProcessingStep, if any was previously set
            </summary>
            <param name="sdkMessageProcessingStepId">The Id of the SdkMessageProcessingStep</param>
            <returns>The plugin instance or null otherwise</returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginInstances.IPluginInstancesRepository.SetPluginInstance(System.Guid,Microsoft.Xrm.Sdk.IPlugin)">
            <summary>
            Stores a new plugin instance for the associated SdkMessageProcessingStep
            </summary>
            <param name="sdkMessageProcessingStepId">The Id of the SdkMessageProcessingStep</param>
            <param name="pluginInstance">The plugin instance to store and that will be used in pipeline simulation</param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginInstances.PluginInstancesRepository">
            <summary>
            The implementation of IPluginInstancesRepository
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.Extensions.SdkMessageConverterExtensions">
            <summary>
            Converts between OrganizationRequest's names and SdkMessage names
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.Extensions.SdkMessageConverterExtensions.ToMessageName(System.String)">
            <summary>
            Converts an OrganizationRequest name to an equivalent message name (i.e. SendEmailRequest is executed as a 'Send' message)
            </summary>
            <param name="requestName"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.Extensions.StringExtensions">
            <summary>
            Some string extension methods
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.Extensions.StringExtensions.ToOrganizationCrudRequestType(System.String)">
            <summary>
            Returns an organization request type from a message name
            </summary>
            <param name="messageName"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.EntityTypeCodeNotFoundException">
            <summary>
            Exception thrown when using a plugin registration method that requires the entity type code to be present
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.EntityTypeCodeNotFoundException.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="entityLogicalName"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.InvalidPrimaryEntityNameException">
            <summary>
            Exception raised when an attemp to register a plugin step was made with an invalid primary entity name
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.InvalidPrimaryEntityNameException.#ctor(System.String)">
            <summary>
            Default constructor that requires the invalid primary entity name
            </summary>
            <param name="entityLogicalName"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.InvalidPluginStepRegistrationException">
            <summary>
            Exception raised when an attemp to register a plugin step was made with an invalid combination of message, entity name, stage and mode
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.InvalidPluginStepRegistrationException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.InvalidRegistrationMethodForLateBoundException">
            <summary>
            Exception thrown when a plugin step registration method for early bound entities was used to register late bound entities
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.InvalidRegistrationMethodForLateBoundException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.PluginStepDefinitionAlreadyRegisteredException">
            <summary>
            Exception that is thrown when a plugin step with the same id is registered twice
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.PluginStepDefinitionAlreadyRegisteredException.#ctor(System.Guid)">
            <summary>
            Default constructor
            </summary>
            <param name="pluginStepId"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.PostImageNotAvailableException">
            <summary>
            Exception thrown when an invalid post image was attempted to be registered
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.PostImageNotAvailableException.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.PreImageNotAvailableException">
            <summary>
            Exception thrown when an invalid preimage was attempted to be registered
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.PreImageNotAvailableException.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.RegisterEntityTypeCodePluginStepWithoutProxyTypesAssemblyException">
            <summary>
            Exception raised when EntityTypeCode is used to register a plugin step but no proxy types assemblies were enabled
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.RegisterEntityTypeCodePluginStepWithoutProxyTypesAssemblyException.#ctor(System.Int32)">
            <summary>
            Default constructor with the offending EntityTypeCode
            </summary>
            <param name="entityTypeCode"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.RegisterInvalidEntityTypeCodePluginStepException">
            <summary>
            Exception raised when an EntityTypeCode was used to register a plugin step but the associated early-bound type was not found
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.RegisterInvalidEntityTypeCodePluginStepException.#ctor(System.Int32)">
            <summary>
            Default constructor with the offending EntityTypeCode
            </summary>
            <param name="entityTypeCode"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.RegisterStepWithEntityTypeCodeAndEntityLogicalNameException">
            <summary>
            Exception raised when both an EntityTypeCode and EntityLogicalName were used to register a plugin step
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.InvalidRegistrationExceptions.RegisterStepWithEntityTypeCodeAndEntityLogicalNameException.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor with the offending EntityTypeCode and EntityLogicalName
            </summary>
            <param name="entityTypeCode"></param>
            <param name="logicalName"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.PluginStepConfigurations">
            <summary>
            Stores information about a plugin step's secure and unsecure configurations
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepConfigurations.SecureConfig">
            <summary>
            Secure configuration of the plugin step
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepConfigurations.UnsecureConfig">
            <summary>
            Unsecure configuration of the plugin step
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepConfigurations.SecureConfigId">
            <summary>
            Optional. The identifier of the secure configuration
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.PluginStepConfigurations.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition">
            <summary>
            Contains the properties of a plugin step that are needed to execute it
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.Id">
            <summary>
            Primary key of the stored sdkmessageprocessingstep
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.Stage">
            <summary>
            Stage where this plugins runs. If null, PostOperation will be used by default
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.MessageName">
            <summary>
            Name of the OrganizationRequest that triggers this plugin step
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.Mode">
            <summary>
            Mode of this plugin step. If null, Synchronous will be used by default
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.EntityLogicalName">
            <summary>
            Entity Logical Name, the plugin will only execute for these entities. This property will take precedence over EntityTypeCode
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.EntityTypeCode">
            <summary>
            If present, the plugin will only execute for entities whose EntityTypeCode matches this value, or any entity otherwise
            EntityTypeCode will be ignored if EntityLogicalName is set
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.Rank">
            <summary>
            The order in which this plugin will run relative to other plugin steps of the same stage and mode
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.FilteringAttributes">
            <summary>
            The attributes used to filter the execution of this plugin. The plugin will only execute if any of the attributes are present in the request,
            or will run regardless of any attributes if empty
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.AssemblyName">
            <summary>
            The name of the assembly that will be used to search for the plugin type
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.PluginType">
            <summary>
            Type of the plugin to be executed (the plugin class name)
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.ImagesDefinitions">
            <summary>
            Any plugin images to be registered for this plugin step, or null or empty
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.Configurations">
            <summary>
            Stores information about the secure and unsecure configurations of this plugin step
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.PluginInstance">
            <summary>
            Optional. Specific plugin instance that will executed instead of the plugin parameterless constructor or configurations constructor
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageFieldNames.Name">
            <summary>
            Property where the Name of the message will be stored
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageFilterFieldNames.EntityLogicalName">
            <summary>
            This property is a hack to support storing the logical name instead of the primary object type, it doesn't exist as an actual field in Dataverse
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageFilterFieldNames.PrimaryObjectTypeCode">
            <summary>
            Primary object type of the associated entity
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepFieldNames.EventHandler">
            <summary>
            Reference to the plugin assembly (PluginType)
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepFieldNames.SdkMessageId">
            <summary>
            Associated message (Create, Update, etc)
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepFieldNames.SdkMessageFilterId">
            <summary>
            Associated filtering entity, if any
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepFieldNames.FilteringAttributes">
            <summary>
            Filtering attributes 
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepFieldNames.Mode">
            <summary>
            Execution mode: sync or async
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepFieldNames.Stage">
            <summary>
            Stage of the plugin execution: PreValidation, PreOperation, PostOperation
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepFieldNames.Rank">
            <summary>
            Rank: sequence of execution
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepFieldNames.Configuration">
            <summary>
            Configuration: the unsecure configuration of this plugin step
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepFieldNames.SdkMessageProcessingStepSecureConfigId">
            <summary>
            SecureConfigId: id of the associated pluginstepsecureconfig id
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepSecureConfigFieldNames.SecureConfig">
            <summary>
            SecureConfig: string that stores the secure configuration
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepImageFieldNames.Name">
            <summary>
            Nam eof the image
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.PluginSteps.PluginStepRegistrationFieldNames.SdkMessageProcessingStepImageFieldNames.SdkMessageProcessingStepId">
            <summary>
            Associated plugin step
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.IPluginStepValidator">
            <summary>
            The plugin step validator is in charge of validating if a given plugin step definition is valid (that it can be registered in plugin registration tool)
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.IPluginStepValidator.IsValid(FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition)">
            <summary>
            Returns true if the given combination is valid
            </summary>
            <param name="stepDefinition">The plugin step definition to validate</param>
            <returns>True if the combination can be registered, false otherwise</returns>
        </member>
        <member name="T:FakeXrmEasy.Plugins.PluginSteps.PluginStepValidator">
            <summary>
            Default implementation of IPluginStepValidator
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.PluginSteps.PluginStepValidator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties">
            <summary>
            Implements several interfaces that are needed for plugin execution (i.e. IServiceProvider, IExecutionContext, IPluginExecutionContext)
            from a given IOrganizationService and ITracingService
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties._context">
            <summary>
            Reference to the IXrmBaseContext that created this instance
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties._service">
            <summary>
            A fake organization service
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties._tracingService">
            <summary>
            A fake tracing service
            </summary>
        </member>
        <member name="F:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties._loggerService">
            <summary>
            Plugin telemetry logger service
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties.#ctor(FakeXrmEasy.Abstractions.IXrmBaseContext,Microsoft.Xrm.Sdk.IOrganizationService,FakeXrmEasy.Abstractions.IXrmFakedTracingService)">
            <summary>
            Default constructor
            </summary>
            <param name="context">The IXrmBaseContext from which this instance is created</param>
            <param name="service">The fake organization service to use by this plugin context properties instance</param>
            <param name="tracingService">The fake tracing service to use by this plugin context properties instance</param>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties.EntityDataSourceRetriever">
            <summary>
            Provides a default EntityDataSourceRetriever
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties.Logger">
            <summary>
            Provides a custom implementation for an ILogger interface or returns the current implementation
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties.GetServiceProvider(Microsoft.Xrm.Sdk.IPluginExecutionContext)">
            <summary>
            Gets a fake service provider interface based on the current fake plugin execution context
            </summary>
            <param name="plugCtx"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties.GetFakedPluginContext(FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext)">
            <summary>
            Returns a fake plugin execution context from a default plugin context in code
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties.GetFakedPluginContext4(FakeXrmEasy.Plugins.PluginExecutionContext.XrmFakedPluginExecutionContext4)">
            <summary>
            Returns a fake plugin execution context for xMultiple messages from a default plugin context in code
            </summary>
            <param name="ctx">The fake plugin context with support for xMultiple messages</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties.GetFakedExecutionContext(FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext)">
            <summary>
            Returns a fake execution context
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties.PopulateExecutionContextPropertiesFromFakedContext(Microsoft.Xrm.Sdk.IExecutionContext,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext)">
            <summary>
            Populates plugin context properties from a given fake plugin context
            </summary>
            <param name="context"></param>
            <param name="ctx"></param>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginContextProperties.PopulatePluginExecutionContextPropertiesFromFakedContext(Microsoft.Xrm.Sdk.IPluginExecutionContext,FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext)">
            <summary>
            Populates IPluginExecutionContext properties from a XrmFakedPluginExecutionContext
            </summary>
            <param name="context"></param>
            <param name="ctx"></param>
        </member>
        <member name="T:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext">
            <summary>
            Holds custom properties of a IPluginExecutionContext
            Extracted from https://msdn.microsoft.com/es-es/library/microsoft.xrm.sdk.ipluginexecutioncontext_properties.aspx
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.BusinessUnitId">
            <summary>
            Gets the GUID of the business unit that the user making the request, also known as the calling user, belongs to.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.CorrelationId">
            <summary>
            Gets the GUID for tracking plug-in or custom workflow activity execution.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.Depth">
            <summary>
            Gets the current depth of execution in the call stack.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.InitiatingUserId">
            <summary>
            Gets the GUID of the system user account under which the current pipeline is executing.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.InputParameters">
            <summary>
            Gets the parameters of the request message that triggered the event that caused the plug-in to execute.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.IsExecutingOffline">
            <summary>
            Gets whether the plug-in is executing from the Microsoft Dynamics 365 for Microsoft Office Outlook with Offline Access client while it is offline.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.IsInTransaction">
            <summary>
            Gets a value indicating if the plug-in is executing within the database transaction.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.IsOfflinePlayback">
            <summary>
            Gets a value indicating if the plug-in is executing as a result of the Microsoft Dynamics 365 for Microsoft Office Outlook with Offline Access client transitioning from offline to online and synchronizing with the Microsoft Dynamics 365 server.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.IsolationMode">
            <summary>
            Gets a value indicating if the plug-in is executing in the sandbox.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.MessageName">
            <summary>
            Gets the name of the Web service message that is being processed by the event execution pipeline.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.Mode">
            <summary>
            Gets the mode of plug-in execution.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.OperationCreatedOn">
            <summary>
            Gets the date and time that the related System Job was created.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.OperationId">
            <summary>
            Gets the GUID of the related System Job.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.OrganizationId">
            <summary>
            Gets the GUID of the organization that the entity belongs to and the plug-in executes under.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.OrganizationName">
            <summary>
            Gets the unique name of the organization that the entity currently being processed belongs to and the plug-in executes under.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.OutputParameters">
            <summary>
            Gets the parameters of the response message after the core platform operation has completed.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.OwningExtension">
            <summary>
            Gets a reference to the related SdkMessageProcessingingStep or ServiceEndpoint
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.PostEntityImages">
            <summary>
            Gets the properties of the primary entity after the core platform operation has been completed.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.PreEntityImages">
            <summary>
            Gets the properties of the primary entity before the core platform operation has begins.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.PrimaryEntityId">
            <summary>
            Gets the GUID of the primary entity for which the pipeline is processing events.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.PrimaryEntityName">
            <summary>
            Gets the name of the primary entity for which the pipeline is processing events.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.RequestId">
            <summary>
            Gets the GUID of the request being processed by the event execution pipeline.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.SecondaryEntityName">
            <summary>
            Gets the name of the secondary entity that has a relationship with the primary entity.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.SharedVariables">
            <summary>
            Gets the custom properties that are shared between plug-ins.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.UserId">
            <summary>
            Gets the GUID of the system user for whom the plug-in invokes web service methods on behalf of.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.ParentContext">
            <summary>
            Gets the execution context from the parent pipeline operation.
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.Stage">
            <summary>
            Gets the stage in the execution pipeline that a synchronous plug-in is registered for.
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.New">
            <summary>
            Factory method that will return a new fake plugin context instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Plugins.XrmFakedPluginExecutionContext.FromSerialisedAndCompressedProfile(System.String)">
            <summary>
            Generates a fake plugin execution context from a previously, compressed, plugin execution, which can then be replayed
            </summary>
            <param name="sSerialisedCompressedProfile"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Pipeline.IXrmFakedContextPipelineExtensions">
            <summary>
            Extension methods to register plugin steps
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.IXrmFakedContextPipelineExtensions.RegisterPluginStep``1(FakeXrmEasy.Abstractions.IXrmFakedContext,FakeXrmEasy.Plugins.Definitions.IPluginStepDefinition)">
            <summary>
            Registers a new plugin againts the specified plugin with the plugin step definition details provided
            When using this method the plugin class specified in the method signature will be used instead of the assembly and plugin
            types provided in the plugin step definition parameter.
            
            All the other remaining settings in the plugin definition parameter will be used for registration.
            </summary>
            <param name="context"></param>
            <param name="pluginStepDefinition">Info about the details of the plugin registration</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.IXrmFakedContextPipelineExtensions.RegisterPluginStep``1(FakeXrmEasy.Abstractions.IXrmFakedContext,System.String,System.String,FakeXrmEasy.Abstractions.Plugins.Enums.ProcessingStepStage,FakeXrmEasy.Abstractions.Plugins.Enums.ProcessingStepMode,System.Int32,System.String[],System.Collections.Generic.IEnumerable{FakeXrmEasy.Plugins.PluginImages.PluginImageDefinition})">
            <summary>
            Registers a plugin step using an entity logical name, ideal for late bound entities
            </summary>
            <typeparam name="TPlugin">The plugin assembly to register</typeparam>
            <param name="context">The IXrmFakedContext where the registration will be stored </param>
            <param name="entityLogicalName">The logical name of the entity</param>
            <param name="message">The message that will trigger the plugin (i.e. request name)</param>
            <param name="stage">The stage in which the plugin will trigger</param>
            <param name="mode">The execution mode (async or sync)</param>
            <param name="rank">If multiple plugins are registered for the same message, rank defines the order in which they'll be executed</param>
            <param name="filteringAttributes">Any filtering attributes (optional)</param>
            <param name="registeredImages">Any pre or post images (optional)</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.IXrmFakedContextPipelineExtensions.RegisterPluginStep``2(FakeXrmEasy.Abstractions.IXrmFakedContext,System.String,FakeXrmEasy.Abstractions.Plugins.Enums.ProcessingStepStage,FakeXrmEasy.Abstractions.Plugins.Enums.ProcessingStepMode,System.Int32,System.String[],System.Collections.Generic.IEnumerable{FakeXrmEasy.Plugins.PluginImages.PluginImageDefinition})">
            <summary>
            Registers the <typeparamref name="TPlugin"/> as a SDK Message Processing Step for the Entity <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TPlugin">The plugin to register the step for.</typeparam>
            <typeparam name="TEntity">The entity to filter this step for.</typeparam>
            <param name="context">The faked context to register this plugin against</param>
            <param name="message">The message that should trigger the execution of plugin.</param>
            <param name="stage">The stage when the plugin should be executed.</param>
            <param name="mode">The mode in which the plugin should be executed.</param>
            <param name="rank">The order in which this plugin should be executed in comparison to other plugins registered with the same <paramref name="message"/> and <paramref name="stage"/>.</param>
            <param name="filteringAttributes">When not one of these attributes is present in the execution context, the execution of the plugin is prevented.</param>
            <param name="registeredImages">Optional, the any images to register against this plugin step</param>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.IXrmFakedContextPipelineExtensions.RegisterPluginStep``1(FakeXrmEasy.Abstractions.IXrmFakedContext,System.String,FakeXrmEasy.Abstractions.Plugins.Enums.ProcessingStepStage,FakeXrmEasy.Abstractions.Plugins.Enums.ProcessingStepMode,System.Int32,System.String[],System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{FakeXrmEasy.Plugins.PluginImages.PluginImageDefinition})">
            <summary>
            Registers the <typeparamref name="TPlugin"/> as a SDK Message Processing Step.
            </summary>
            <typeparam name="TPlugin">The plugin to register the step for.</typeparam>
            <param name="context">The faked context to register this plugin against</param>
            <param name="message">The message that should trigger the execution of plugin.</param>
            <param name="stage">The stage when the plugin should be executed.</param>
            <param name="mode">The mode in which the plugin should be executed.</param>
            <param name="rank">The order in which this plugin should be executed in comparison to other plugins registered with the same <paramref name="message"/> and <paramref name="stage"/>.</param>
            <param name="filteringAttributes">When not one of these attributes is present in the execution context, the execution of the plugin is prevented.</param>
            <param name="primaryEntityTypeCode">The entity type code to filter this step for.</param>
            <param name="registeredImages">Optional, the any images to register against this plugin step</param>
        </member>
        <member name="T:FakeXrmEasy.Pipeline.Exceptions.PreEntityImageNotFoundException">
            <summary>
            Exception raised when an image has been registered but the associated target entity doesn't exist
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.Exceptions.PreEntityImageNotFoundException.#ctor(System.String,System.Guid)">
            <summary>
            Default constructor
            </summary>
            <param name="logicalName">The pre entity image logical name</param>
            <param name="id">The pre entity image Id</param>
        </member>
        <member name="T:FakeXrmEasy.Pipeline.PipelineProcessor">
            <summary>
            Class in charge of the simulated event execution pipeline
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.PipelineProcessor.ProcessPipelineRequest(Microsoft.Xrm.Sdk.OrganizationRequest,FakeXrmEasy.Abstractions.IXrmFakedContext,FakeXrmEasy.Abstractions.Middleware.OrganizationRequestDelegate)">
            <summary>
            Processes the event execution pipeline for the current request
            </summary>
            <param name="request"></param>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.PipelineProcessor.GetEntityImageCollection(System.Collections.Generic.IEnumerable{Microsoft.Xrm.Sdk.Entity},Microsoft.Xrm.Sdk.Entity)">
            <summary>
            Gets an entity image collection for each registered entity image and the current entity record
            </summary>
            <param name="imageDefinitions"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.PipelineProcessor.ExecutePipelinePlugins(FakeXrmEasy.Abstractions.IXrmFakedContext,System.Collections.Generic.IEnumerable{FakeXrmEasy.Plugins.PluginSteps.PluginStepDefinition},FakeXrmEasy.Pipeline.PipelineStageExecutionParameters)">
            <summary>
            Executes all the relevant plugin steps for the current request
            </summary>
            <param name="context"></param>
            <param name="pluginSteps"></param>
            <param name="parameters"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.PipelineProcessor.ExecutePipelineStage(FakeXrmEasy.Abstractions.IXrmFakedContext,FakeXrmEasy.Pipeline.PipelineStageExecutionParameters)">
            <summary>
            Retrieves any necessary plugins for the current stage and mode and executes them with the given request
            </summary>
            <param name="context"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.Request">
            <summary>
            Original request that triggered this pipeline execution stage
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.Response">
            <summary>
            Original response of the request that triggered this pipeline execution stage
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.PreEntitySnapshot">
            <summary>
            Snapshot of the entity values before the execution of a non-bulk operation request
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.PostEntitySnapshot">
            <summary>
            Snapshot of the entity values after the execution of a non-bulk operation request
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.PreEntitySnapshotCollection">
            <summary>
            Snapshot of all the entity preimages before the execution of a bulk operation request
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.PostEntitySnapshotCollection">
            <summary>
            Snapshot of all the entity postimages after the execution of a bulk operation request
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.Scope">
            <summary>
            The current event pipeline scope
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.ToNonBulkPipelineExecutionParameters">
            <summary>
            Converts the current bulk operation pipeline request parameters into an array of multiple non-bulk operation pipeline execution parameters 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.ToBulkPipelineExecutionParameters">
            <summary>
            Converts the current non-bulk operation pipeline request parameter into another pipeline execution parameter with a bulk operation and a single record
            </summary>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.PipelineStageExecutionParameters.FromOrganizationRequest(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Creates new pipeline execution parameters from the current organization request
            </summary>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Pipeline.PluginStepRegistrationManager">
            <summary>
            Internal helper class that contains logic to register new plugin steps
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Pipeline.RegisteredPluginStepsRetriever">
            <summary>
            Given an organization request, retrieves all the plugin steps registered for that message
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.RegisteredPluginStepsRetriever.GetPluginStepsForOrganizationRequest(FakeXrmEasy.Abstractions.IXrmFakedContext,FakeXrmEasy.Pipeline.PipelineStageExecutionParameters)">
            <summary>
            Gets all the plugin steps needed to execute the request specified in the pipeline stage execution parameter.
            Also implements the merged pipeline simulation where a bulk operation request might also trigger "non-bulk" plugins if they exist and were registered
            and vice-versa (a non-bulk request triggering a bulk operation plugin)
            </summary>
            <param name="context">The In-Memory XrmFakedContext</param>
            <param name="parameters">The pipeline stage execution parameter with info about the current event pipeline stage that is being executed</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.RegisteredPluginStepsRetriever.GetOrganizationRequestFilteringAttributes(FakeXrmEasy.Abstractions.IXrmFakedContext,Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Returns the distinct set of attributes that was sent in a given organization request
            </summary>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.RegisteredPluginStepsRetriever.GetNonTargetOrganizationRequestEntityLogicalName(Microsoft.Xrm.Sdk.OrganizationRequest)">
            <summary>
            Retrieves the logical name for requests that don't have a generic target or targets parameters
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Pipeline.Scope.EventPipelineScope">
            <summary>
            An event pipeline scope contains information about the current stack / context that is being executed for a given request
            It uses a different naming convention 'Scope' as opposed to 'Context'  to avoid confusion with existing plugin execution context naming conventions.
            Think of it as kind of a function 'scope', like a reference to a specific call stack
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.Scope.EventPipelineScope.PluginContext">
            <summary>
            The current plugin execution context that is being executed
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.Scope.EventPipelineScope.PluginContextProperties">
            <summary>
            Additional plugin context properties that we need to store internally in addition to IPluginExecutionContext properties
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Pipeline.Scope.EventPipelineScopeOrganizationServiceExtensions">
            <summary>
            Event Pipeline Scope extensions
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.Scope.EventPipelineScopeOrganizationServiceExtensions.GetEventPipelineScope(Microsoft.Xrm.Sdk.IOrganizationService)">
            <summary>
            Returns the current event pipeline scope in which the service is being executed
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.Scope.EventPipelineScopePluginExecutor.ExecutePluginWith(FakeXrmEasy.Pipeline.Scope.EventPipelineScope,Microsoft.Xrm.Sdk.IPlugin)">
            <summary>
            Executes a specific instance of a plugin against the current scope
            </summary>
            <param name="scope"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.Scope.EventPipelineScopePluginExecutor.ExecutePluginWith``1(FakeXrmEasy.Pipeline.Scope.EventPipelineScope)">
            <summary>
            Executes a plugin using the default constructor against the current scope
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.Scope.EventPipelineScopePluginExecutor.ExecutePluginWithConfigurations``1(FakeXrmEasy.Pipeline.Scope.EventPipelineScope,System.String,System.String)">
            <summary>
            Executes a plugin with configurations against the current scope
            </summary>
            <param name="scope"></param>
            <param name="unsecureConfiguration"></param>
            <param name="secureConfiguration"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Pipeline.Scope.IPipelineOrganizationService">
            <summary>
            A pipeline organization service is an IOrganizationService that is being executed as part of a specific EventPipelineScope
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.Scope.IPipelineOrganizationService.Scope">
            <summary>
            The current event / execution scope 
            </summary>
        </member>
        <member name="T:FakeXrmEasy.Pipeline.Scope.PipelineOrganizationRequest">
            <summary>
            An internal organization request that decorates additional properties for pipeline processing
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.Scope.PipelineOrganizationRequest.OriginalRequest">
            <summary>
            A reference to the the original request that is being executed
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Pipeline.Scope.PipelineOrganizationRequest.CurrentScope">
            <summary>
            Info about the current event pipeline scope
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Pipeline.Scope.PipelineOrganizationServiceFactory.New(Microsoft.Xrm.Sdk.IOrganizationService,FakeXrmEasy.Pipeline.Scope.EventPipelineScope)">
            <summary>
            Creates a new IPipelineOrganizationService from a previous IOrganizationService with a given scope
            </summary>
            <param name="service">An existing IOrganizationService that was created from an IXrmFakedContext</param>
            <param name="scope">The EventPipelineScope that will be stored in this service</param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Middleware.Pipeline.MiddlewareBuilderPipelineExtensions">
            <summary>
            Provides extensions for plugin pipeline simulation
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Middleware.Pipeline.MiddlewareBuilderPipelineExtensions.AddPipelineSimulation(FakeXrmEasy.Abstractions.Middleware.IMiddlewareBuilder)">
            <summary>
            Enables Pipeline Simulation in middleware with default options
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Middleware.Pipeline.MiddlewareBuilderPipelineExtensions.AddPipelineSimulation(FakeXrmEasy.Abstractions.Middleware.IMiddlewareBuilder,FakeXrmEasy.Middleware.Pipeline.PipelineOptions)">
            <summary>
            Enables Piepeline Simulation in middleware with custom options
            </summary>
            <param name="builder"></param>
            <param name="options">The custom options</param>
            <returns></returns>
        </member>
        <member name="M:FakeXrmEasy.Middleware.Pipeline.MiddlewareBuilderPipelineExtensions.UsePipelineSimulation(FakeXrmEasy.Abstractions.Middleware.IMiddlewareBuilder)">
            <summary>
            Inserts pipeline simulation into the middleware. When using pipeline simulation, this method should be called before all the other Use*() methods
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:FakeXrmEasy.Middleware.Pipeline.PipelineOptions">
            <summary>
            Configures Pipeline Simulation Options
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Middleware.Pipeline.PipelineOptions.UsePipelineSimulation">
            <summary>
            Enables Pipeline Simulation in middleware
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Middleware.Pipeline.PipelineOptions.UsePluginStepAudit">
            <summary>
            Enables auditing of plugin steps that were executed in the pipeline
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Middleware.Pipeline.PipelineOptions.UsePluginStepRegistrationValidation">
            <summary>
            Enables validation of the registration of unsupported plugin steps
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Middleware.Pipeline.PipelineOptions.UseAutomaticPluginStepRegistration">
            <summary>
            Enables automatic discovery and registration of plugin steps
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Middleware.Pipeline.PipelineOptions.PluginAssemblies">
            <summary>
            When UseAutomaticPluginStepRegistration is enabled: the assemblies where to look for plugin steps
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Middleware.Pipeline.PipelineOptions.CustomPluginStepDiscoveryFunction">
            <summary>
            When UseAutomaticPluginStepRegistration is enabled: Custom function that will be invoked for each assembly 
            in PluginAssemblies to find any plugin step definitions via a custom discovery function 
            (i.e. one that reads from an externally generated CrmPluginRegistrationAttribute class...)
            </summary>
        </member>
        <member name="P:FakeXrmEasy.Middleware.Pipeline.PipelineOptions.MaxDepth">
            <summary>
            Sets the default max depth for plugin execution
            </summary>
        </member>
        <member name="M:FakeXrmEasy.Middleware.Pipeline.PipelineOptions.#ctor">
            <summary>
            Default constructor with Pipeline Simulation enabled by default
            </summary>
        </member>
    </members>
</doc>
